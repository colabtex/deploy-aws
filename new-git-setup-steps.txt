*. Power off system, and provision any additional resources desired now

1. Open new shell/terminal, and confirm git version by running $ { git --version }

*. You will need to add your GPG key to github, so install pgpgpg in order to do so
   $ { sudo apt install pgpgpg }

2. Open VS Code

3. Configure key bindings, profile, etc. as desired (use CTRL+SHIFT+P to 
   quickly view current bindings)

4. Configure workspace profile/preferences as desired

5. In the left panel, click the "Open Folder" button to open a new folder
   (~/Server/aws-deployment is recommended), hencforth called ${project_dir}

*. If asked "Do you trust the authors of the files in this folder?" check the
   box "Trust the authors of all files in the parent folder '${project_dir}'"
   and then click the button "Yes, I trust the authors"

*. Open a new terminal inside VS Code

*. Run the following command to initialize an empty local git repo:
   $ { git init }

*. Run $ { git config user.name desired_git_username }

*. Run $ { git config user.email desired_git_username@colabtex.com }

*. Follow the guide below in order to set up your github keys
   https://docs.platform.sh/development/private-repository.html

*. Run the following to ensure you don't already have any GPG keys 
   for Github on your local machine:
   $ { $ gpg --list-secret-keys --keyid-format=long }

*. Assuming there aren't already any there (or at least none that you 
   want to use for Github), run the following to generate a GPG key pair
   $ { gpg --full-generate-key }
   
*. Choose the default optioon for the key types, keysize, and how long
   the keys should be valid for, then enter y to confirm
   
*. Enter your real name (for Intellectual Property and Copyright reasons)

*. Enter your current valid email address

*. Enter "no comment" (without quotation marks) for the comment

*. Choose the default option for each prompt

*. For a passphrase, use yourHHMM where HHMM is the time
   formatted just as numbers using military time (for obfuscation, and for
   psuedo-random / psuedo-unique identification)

*. List the long form of the GPG keys by running the following:
   $ { gpg --list-secret-keys --keyid-format=long }

*. From that list (likely only one in it), copy the long form of the
   GPG key ID you'd like to use - and example ID would like like this:
   3AA5C34371567BD2

*. Run the following to print the GPG key ID, in ASCII armor format,
   so that you can add it to Github:
   $ { pgp --armor --export your_gpg_key_id }

*. Copy the key that is printed on the screen, beginning with: 
   -----BEGIN PGP PUBLIC KEY BLOCK----- 
   ... and ending with:
   -----END PGP PUBLIC KEY BLOCK-----

*. Add the GPG key to your GitHub account (see link below):
   https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account

## The remainder of this script may or may not be valid
## Still, try everything up until the call to exit

*. Add a new remote (this Github repo) and call it origin
   $ { git remote add origin  }

*. Create a new local branch using git checkout, give it the name production, and set it to track origin/main
   $ { git checkout --track -b production origin/main }
exit

# This is wrong, don't clone, you need to pull
!! Where indicated in VS Code, click the option to "Clone from Github"

7. Click "Allow" to permit signin via the machine's default web browser

8. Enter Github credentials

9. Decline option to save password

10. Click the confirmation button that says "Authorize Visual-Studio-Code" in 
    order to "Authorize GitHub for VS Code"

11. If prompted to "Allow https://vscode.dev to open the vscode link with 
    System Handler?" select "Open Link"

12. If prompted to "Allow an extension to open this URI?" select "Open"

13. Pull the repo you desire (for verification that things are proceeding 
    properly, recommended repo is this one, "deploy-aws", but henceforth called 
    ${remote})

14. In Nautilus, choose a desired folder location for the repository 
    (recommended is ~your_username/Server), henceforth called ${serverdir}

15. If asked "Would you like to open the cloned repository?" select the button 
    "Open"

16. If asked "Do you trust the authors of the files in this folder?" select 
    the option "Yes, I trust the authors"

17. Open a new shell using CTRL+ALT+T

18. Navigate into the ${serverdir}/${remote}

19. Run $ { ls ./ } and confirm you see the ".git" directory

20. Run $ { git config user.name desired_git_username }

21. Run $ { git config user.email desired_git_email@localhost }

22. In VS Code, create a new file called "github-time-test.txt" within 
    ${serverdir}/${remote}

23. In github-time-test.txt, enter the current date and time and your favorite 
    color formatted as "YYYY/MM/DD HH:MM AM/PM Red"

24. Pull changes

25. Add the file github-time-test.txt (and just that file, ensuring no other 
    files are staged), commit with a message formatted as "Test Commit (RED)"

26. Click button to "Sync Changes 1"

27. Check Github and ensure you see your commit
